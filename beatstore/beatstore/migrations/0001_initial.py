# Generated by Django 3.2.9 on 2021-11-26 10:29

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import utils.uploading


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Beat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Бит')),
                ('release_date', models.DateField(verbose_name='Дата релиза')),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Цена')),
                ('discount', models.BooleanField(default=False, verbose_name='Скидка')),
                ('image', models.ImageField(upload_to=utils.uploading.upload_function)),
            ],
            options={
                'verbose_name': 'Бит',
                'verbose_name_plural': 'Биты',
            },
        ),
        migrations.CreateModel(
            name='Beatmaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Битмейкер')),
                ('slug', models.SlugField()),
                ('image', models.ImageField(blank=True, null=True, upload_to=utils.uploading.upload_function)),
            ],
            options={
                'verbose_name': 'Битмейкер',
                'verbose_name_plural': 'Битмейкеры',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_products', models.IntegerField(default=0, verbose_name='Общее количество товаров')),
                ('final_price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Общая цена')),
                ('in_order', models.BooleanField(default=False)),
                ('for_anonymous_user', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Корзина',
                'verbose_name_plural': 'Корзины',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активный?')),
                ('phone', models.CharField(max_length=20, verbose_name='Номер телефона')),
                ('email', models.CharField(max_length=255, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'Покупатель',
                'verbose_name_plural': 'Покупатели',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Жанр')),
                ('slug', models.SlugField()),
            ],
            options={
                'verbose_name': 'Жанр',
                'verbose_name_plural': 'Жанры',
            },
        ),
        migrations.CreateModel(
            name='LicenseType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название лицензии')),
                ('description', models.TextField(verbose_name='Описание лицензии')),
                ('file_type', models.CharField(max_length=100, verbose_name='Формат файла')),
                ('number_of_copies', models.CharField(max_length=255, verbose_name='Количество копийй')),
                ('slug', models.SlugField()),
            ],
            options={
                'verbose_name': 'Тип лицензии',
                'verbose_name_plural': 'Типы лицензий',
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Плейлист')),
                ('slug', models.SlugField()),
                ('image', models.ImageField(blank=True, null=True, upload_to=utils.uploading.upload_function)),
                ('beats', models.ManyToManyField(related_name='playlist', to='beatstore.Beat', verbose_name='Бит')),
            ],
            options={
                'verbose_name': 'Плейлист',
                'verbose_name_plural': 'Плейлисты',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=255, verbose_name='Email')),
                ('status', models.CharField(choices=[('new', 'Новый заказ'), ('in_progress', 'Заказ в обработке'), ('is_ready', 'Заказ выполнен')], default='new', max_length=100, verbose_name='Статус заказа')),
                ('created_at', models.DateField(auto_now=True, verbose_name='Дата создания заказа')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='beatstore.cart', verbose_name='Корзина')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='beatstore.customer', verbose_name='Покупатель')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('read', models.BooleanField(default=False)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='beatstore.customer', verbose_name='Получатель')),
            ],
            options={
                'verbose_name': 'Уведомеление',
                'verbose_name_plural': 'Уведомеления',
            },
        ),
        migrations.CreateModel(
            name='ImageGallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('image', models.ImageField(upload_to=utils.uploading.upload_function)),
                ('use_in_slider', models.BooleanField(default=False)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Галерея изображений',
                'verbose_name_plural': 'Галерея изображений',
            },
        ),
        migrations.AddField(
            model_name='customer',
            name='customer_orders',
            field=models.ManyToManyField(blank=True, related_name='related_customer', to='beatstore.Order', verbose_name='Заказы покупателя'),
        ),
        migrations.AddField(
            model_name='customer',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.AddField(
            model_name='customer',
            name='whishlist',
            field=models.ManyToManyField(blank=True, to='beatstore.Beat', verbose_name='Список желаемого'),
        ),
        migrations.CreateModel(
            name='CartProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='beatstore.cart', verbose_name='Корзина')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='beatstore.customer', verbose_name='Покупатель')),
            ],
            options={
                'verbose_name': 'Продукт корзины',
                'verbose_name_plural': 'Продукты корзины',
            },
        ),
        migrations.AddField(
            model_name='cart',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='beatstore.customer', verbose_name='Покупатель'),
        ),
        migrations.AddField(
            model_name='cart',
            name='products',
            field=models.ManyToManyField(blank=True, null=True, related_name='related_cart', to='beatstore.CartProduct', verbose_name='Продукты для корзины'),
        ),
        migrations.AddField(
            model_name='beat',
            name='beatmaker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='beatstore.beatmaker', verbose_name='Битмейкер'),
        ),
        migrations.AddField(
            model_name='beat',
            name='genre',
            field=models.ManyToManyField(related_name='genre', to='beatstore.Genre', verbose_name='Жанр'),
        ),
        migrations.AddField(
            model_name='beat',
            name='license',
            field=models.ManyToManyField(related_name='license', to='beatstore.LicenseType', verbose_name='Тип лицензии'),
        ),
    ]
